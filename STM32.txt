-----------------------------Clock------------------------------------
1. Khái niệm: Clock cung cấp xung nhịp cho lõi vi điều khiển và các thiết bị ngoại vi giúp chúng hoạt động được. Clock hệ thống quyết định tốc độ xử lí của vi điều khiển
- Nguồn clock:
+ Dao động nội tốc độ cao(HSI): lấy từ dao động RC nội 8MHz
+ Dao động ngoại tốc độ cao(HSE): lấy tư thạch anh 4-16M
+ Nguồn clock PLL(Phase Lock Loop)
Ngoài ra còn 2 nguồn clock phụ
+ Nguồn dao động RC nội (LSI RC) lấy từ RC nội 40KHz cung cấp cho IWDG
+ Dao động thạch anh ngoại(LSE crystal) lấy từ dao động thạch anh 32.768KHz cung cấp cho RTC-Realtime clock

2. Quá trình thiết lập clock hệ thống
Để cấu hình STM32 sử dụng ở tần số Clock cao nhất (72MHz) ta thực hiện theo các
bước sau:
	Cho phép bộ dao động HSE hoạt động.
	Chờ cho bộ dao động HSE đi vào hoạt động ổn định (dùng làm đầu vào cho bộ PLL).
	Với tần số thạch anh 8MHz, cấu hình bội số nhân cho bộ PLL là 9 để tạo ra tần số
	Clock ở đầu ra bộ PLL = 72MHz.
	Cho phép bộ PLL hoạt động.
	Chờ cho bộ PLL đi vào hoạt động ổn đinh.
	Khi đã hoạt động ổn định, cấu hình xung Clock từ bộ PLL sử dụng để cung cấp cho hệ
	thống àhệ thống hoạt động với tần số Clock max = 72MHz.

-----------------------------GPIO------------------------------------
1. GPIO có 7 port A-G và mỗi port có 16 pin
2. Config GPIO:
- GPIO cấp clock từ bus ABP2 tối đa 72M nhưng tối đa 50M.
VD: Cho phep su dung gpioa, gpiob RCC->APB2ENR=(1<<2)|(1<<3);
- Cấu hình các mode GPIO
+Input floating : cấu hình chân I/O là ngõ vào và để thả  nổi 2 khóa VDD, VSS đều mở  dữ liệu đầu vào sẽ được đã thăng vào trigger mode này sử dụng để phát hiện sườn clock  (chân nhận dữ liệu USART, SPI ... )
+Input pull-up : cấu hình chân I/O là ngõ vào, có trở kéo lên nguồn. Chân được kéo lên cao nếu chân không nối với  với mức điện áp thấp GND thì điện áp đọc được chân sẽ là mức điện áp cao(3,3V) hay giá trị 1 
+Input-pull-down: cấu hình chân I/O là ngõ vào, có trở kéo xuống GND. chế độ chân kéo xuống mức điện áp thâp khóa VDD mở , VSS đóng chân ở mode này luôn ở  mức điện áp thấp nếu không nối chân với nguồn điện áp cao
.Analog : cấu hình chân I/O là Analog, dùng cho các mode có sử dụng ADC hoặc DAC. Sử dụng để đọc tín hiệu tương tự như cảm biết nhiệt độ, biến trở
+Output open-drain: cấu hình chân I/O là ngõ ra, khi output control = 0 thì N-MOS sẽ dẫn, chân I/O sẽ nối VSS, còn khi output control = 1 thì P-MOS và N-MOS đều không dẫn, chân I/O được để nổi. mode chân điều khiển mở và nhận điện áp từ nguồn điện áp  bên ngoài
+Output push-pull: cấu hình chân I/O là ngõ ra, khi output control = 0 thì N-MOS sẽ dẫn, chân I/O sẽ nối VSS, còn khi output control = 1 thì P-MOS dẫn, chân I/O được nối VDD. mode chân vi điều khiển xuất dẫn xung dao động vi điều khiển luân phiên va bên ngoài chân, mode này được sử dụng như nguồn clock giữ nhịp hoặc chân truyền sữ liệu tốc độ cao (SPI, UART ...)

+Các thanh ghi:  GPIOx->CRL, GPIOx->CRH (GPIOx=GPIOA,GPIOB,...) dùng để cấu hình mode

-Thanh ghi xuất dữ liệu: điện áp ra ngoài chân tương ứng
a.GPIOx->ODR (x=A,B,C,D,..G) : thanh ghi 32 bit từ 31 đến bit 16 dự trữ không sử dụng bit 0 đến bit 15 sử dụng cấu hình chân từ 0 đến 15
Bit  tương ưng set lên 1 chân sẽ xuất dữ liệu hay mức điện áp cáo từ chân vi điều khiển ra bên ngoài, mức 0 chân sẽ ở mức điện áp thâp (0v)
b.thanh ghi : GPIOx->BSRR : thanh ghi 32 bit các bit 0 đến đến 15 sẽ để set các bit 0 đến 15 của thanh ghi GPIOx->ODR lên 1 các bit 16 đến 31 sử dụng  để reset các bit 0 đến 15
c.thanh ghi GPIOx->ODR về 0 khi ghi giá trị 1 vào bit tương ưng thanh ghi GPIOx->BSRR nếu ghi giá trị 0 vào bit thanh ghi GPIOx->BSRR thì sẽ không có hiệu lực

- Đọc trạng thái điện áp của 1 chân input ,thanh ghi GPIOx->IDR(x=A,B,C,...): Thanh ghi 32 bit từ bit 31 đến bit 16 dự trư không sử dụng, từ bit 0 đến 15 sử dụng để đọc điện áp  chân cấu hình input từ 0 đên 15 nếu đọc bit có giá trị 1 thi điện áp đầu vào chân có mức điện áp cao nếu là 0 thi điện áp đầu vào chân là mưc thấp.

--------------------------------I2C--------------------------------------
1.
a.Đặc điểm:
I2C – Inter- Intergrated Circuit là chuẩn truyền thông 2 dây gồm 1 dây Clock và 1 dây Data dùng chung cho quá trình truyền nhận. Khi giao tiếp I2C với 1 IC nào đó cần chú ý : địa chỉ của Ic đó để giao tiếp, giao tiếp với tốc độ bao nhiêu, bao nhiêu bit.
Sử dụng hệ thống địa chỉ 7 bit để xác định một thiết bị / IC cụ thể trên bus I2C
Chế độ chuẩn (standard mode) hoạt động ở tốc độ 100 Kbit/s.
Chế độ tốc độ thấp (high-speed mode) hoạt động ở tốc độ 400 Kbit/s.
b.Giao thức: Dữ liệu truyền giữa master và slave thông qua 1 đường SDA duy nhất
- Ban đầu khi chưa thực hiện quá trình giao tiếp, cả hai đường SDA và SCL đều ở mức cao (SDA = SCL = HIGH). Lúc này bus I2C được coi là rỗi (“bus free”), sẵn sàng cho một giao tiếp. 
- Điều kiện START: SDA 1->0 trong khi SCL vẫn ở mức cao
-Khối địa chỉ: gồm 7 bit và lấp đầy với địa chỉ Slave đến / từ đó thiết bị master càn gửi/nhận dữ liệu. Cac thiết bị slave so sánh với địa chỉ của chúng
- Bit read/write: xác định hướng truyền dữ liệu, bằng 1 gửi dữ liệu từ slave->master, bằng 0 gửi từ master->slave
- Bit ACK/NACK: nếu địach chỉ slave nào trùng với địa chỉ master phát, bit này set = 0 bởi bên nhajan
- Khối dữ liệu: bao gồm 8 bit thiết lập bởi bên gửi, khối này theo sau bởi 1 bit ACK/NACk
- Điều kiện STOP: SDA->1 trong khi SCL vẫn ở mức cao

2.Config I2C
a. STM32F103C8T6 có 2 bộ chuyển đổi I2C với các tính năng được tóm tắt như sau:

Có thể lập trình là Master hay Slave.
Đối với Master: Tạo ra xung clock và tạo ra tín hiệu start, stop.
Đối với Slave : Lập trình được địa chỉ của thiết bị I2C, chế độ kiểm tra bit stop.
Số địa chỉ được sinh ra cũng như được kiểm tra là 7 bit hoặc 10 bit.
Hỗ trợ 2 chuẩn tốc độ là 100khz và 400 Khz.
Có bộ lọc nhiễu Analog.
Tích hợp mode DMA.
Có các cờ báo trạng thái : Nhận, truyền, kết thúc chuyển đổi, báo lỗi…
Có các ngắt như: Ngắt buffer truyền, nhận; ngắt sự kiện, ngắt báo lỗi.

b. VD: Cấu hình I2C master
Tóm tắt quá trình truyền như sau:

	- Đầu tiên bộ I2C sẽ tạo ra tín hiệu start đến EV5: SB = 1 (tạo ra điều kiện bắt đầu trên thanh ghi SR1)
	- Sau đó gửi địa chỉ và hướng truyền
	- Đợi bit ACK từ Slave truyền cho Master 
	- Tiếp tục kiểm tra EV6: ADDR = 1(Master sẽ gởi địa chỉ của Slave và Slave nhận đúng chính xác địa chỉ của mình do Master gởi) – EV8.1: TxE=1 (hiện tại thì thanh ghi dịch và thanh ghi dữ liệu hiện đang trống) 
	- Kiểm tra EV8 (lúc này dữ liệu thanh ghi dịch đã có và bắt đầu truyền đến Slave)
	- Gửi Data đến thiết bị slave với địa chỉ truyền ở trên
	- Nếu Slave nhận được dữ liệu sẽ trả về bit ACK cho Master để xác nhận đã dữ liệu
	- Kiểm tra EV8_2 – tương ứng code là kiểm tra toàn bộ Data đã truyền xong chưa (TXE, BTF)
	- Đợi truyền xong và bộ I2C sẽ tạo ra tín hiệu kết thúc.

c. Thanh ghi
- I2C_CR1: I2C control register 1
	ACK : Cho phép nhận hoặc không nhận tín hiệu ACK return từ thiết bị được truyền.
	STOP : Sinh ra tín hiệu stop kết thúc quá trình giao tiếp.
	START : Sinh ra tín hiệu start để bắt đầu quá trình giao tiếp.
	PE: Peripheral enable – bit này được bật lên bằng 1 khi quá trình giao tiếp I2C đang được thực hiện và kết thúc khi có tín hiện End communication.
- I2C_CR2: 
	ITBUFEN : Cho phép hoặc không cho phép xảy ra ngắt khi có Data trong truyền/nhận.
	ITEVTEN : Cho phép ngắt khi xảy ra các sự kiện sau trên các bit sau: SB, ADDR, ADD10, STOPF, BTF , TxE, RxE.
	ITERREN : Cho phép hoặc không cho phép xảy ra ngắt khi có lỗi xảy ra.
	FREQ[5:0] : Bộ chia clock tần số được tính từ nhánh clock hệ thống chia cho bộ I2C.
- I2C_DR: Data register chứa data quá trình truyền nhận
- I2C_SR1: Status reg- chứa cờ báo trạng thái quá trình giao tiếp
	TIME OUT: Báo hết thời gian đợi quá trình truyền nhận data.
	PECERR: Chấp nhận lỗi PCE và phản hồi lại quá trình tín hiệu lỗi.
	OVR : Báo quá trình overrun/ underrun.
	AF: Báo tín hiệu ACK bị lỗi hay không.
	TxE : Báo buffer truyền có trống hay không.
	RxE : Báo buffer nhận có trống hay không.
	STOPF : Cờ báo có kiểm tra quá trình stop hay không.
	BTF: Báo truyền byte dữ liệu đã xong hay chưa.
	ADDR: Báo địa chỉ đã được gửi(mode master) hay không tương thích (mode slave).
	SB: Có sử dụng bit start hay không.
- I2C_CCR: Clock control reg
	F/S : Sử dụng mode Fast(400khz) hay Standard(100Khz).
	DUTY: Chỉ sử dụng cho Fast mode với 2 chế độ .
	CCR[11:0] : Thanh ghi chứa Clock control cho bộ , công thức chia tham khảo thêm trong reference manual.

	------------------------------------------EXTI--------------------------------------------------------------

	1.Khái niệm
- Ngắt (Interrupt) có thể hiểu nôm na là 1 tín hiệu khẩn cấp gửi đến bộ vi xử lý, yêu cầu bộ vi xử lý tạm dừng các công việc đang thực hiện để nhảy đến 1 nơi khác thực hiện một chương trình khác (công việc khác).
- Một số thông số tính năng chính của NVIC:
	16 mức ưu tiên có thể lập trình được.
	Độ trễ thấp (xảy ra ngắt cực kì nhanh).
	Có quản lí năng lượng cho vector ngắt.
	Có các thanh ghi điều khiển quá trình ngắt.
	68 vector ngắt
	Ngắt ngoài nằm trong
- Một số tính năng chính của ngắt ngoài:
	Kích hoạt độc lập và mask cho mỗi line sự kiện/ngắt.
	Có bit trạng thái (status) riêng cho mỗi line ngắt.
	Có thể có tối đa 20 sự kiện/ ngắt, tham khảo thêm trong reference manual.
	Kiểm tra tín hiệu ngoài có độ rộng xung nhỏ hơn clock trên APB2.
- Có 2 loại ngắt ngoài chính đó là ngắt ngoài trên các chân điều khiển ở dạng thông thường và ngắt ngoài trên các ứng dụng như : PVD, RTC, USB, Ethernet(line 16-19)
- Các line là riêng biệt, mỗi line x dùngchugn cho các chân PAx, PBx,... Khi enable ở chân này thì ở chân khác line đó không dùng được nữa.Với coretex-M3 ngắt được điều khiển bởi NVIC(Nest Vector Interrupt Controller), bảng vector ngắt sẽ định địa chỉ sẵn, khi xảy ra ngắt con trỏ sẽ nhảy đến vị trí đó thực hiện chương trình.
Sau đó các line ngắt sẽ được phân bố vào bảng ector ngắt tương ứng: Các Line0, Line1, Line2, Line3, Line4 sẽ được phân vào các vector ngắt riêng biệt EXTI0, EXTI1, EXTI2, EXTI3, EXTI4, còn từ Line5->Line9 sẽ được phân vào vector ngắt EXTI9_5, Line10->Line15 được phân vào vecotr EXTI15_10.

	2. Config EXTI
A.
b. Thanh ghi
- EXTI_IMR – Interrupt mask register: Thanh ghi này cho phép có kiểm tra ngắt ngoài trên chân tương ứng hay chưa.
- EXTI_EMR - Event mask register: Thanh ghi này cho phép có cấu hình sự kiện trên chân tương ứng hay chưa.
- EXTI_RTSR – Rising trigger selection register: Thanh ghi này cho phép chân xảy ra sự kiện/ ngắt là cạnh lên hay không.
- EXTI_PR – Pending register : Đây là thanh ghi chờ xử lý ngắt, khi có yêu cầu ngắt được tạo ra trên một Line ngắt thì bit tương tứng của thanh ghi này được bật lên cho đến khi ngắt này được xử lý. Nhiều trước hợp có sự thay đổi sườn tín hiệu tạo ra yêu cầu ngắt nhưng ngắt không được thực thi như: độ ưu tiên thấp, chưa cho phép ngắt toàn cục.
- EXTI_SWIER – Software interrupt even register:  Thanh ghi này cho phép mô phỏng ngắt ngoài xảy ra trên chân đã được cấu hình(thay vị tác động bằng cạnh lên/xuống trên chân vi điều khiển ta có thể sử dụng nó để giả lập tác động từ bên ngoài bằng việc set hoặc reset bit tương ứng).

----------------------------------------Systick Tim-----------------------------------------
1. Khái niệm
System Tick Timer là bộ timer 24 bit độc lập nằm trong lõi cortex. Bộ timer này là timer đếm xuống, xảy ra ngắt ở mức ưu tiên cao khi giá trị đếm bằng 0 và tự nạp lại giá trị đếm ban đầu.

System Tick Timer thường được được dùng để tạo hàm delay với độ chính xác cao, thay thế cho các hàm delay với độ chính xác tương đối dùng vòng lặp for hay while.
- Đặc điểm:
	Là một bộ đếm xuống 24 Bit.
	Giá trị đếm được tự động nạp lại khi bộ đếm đếm về 0.
	Có thể tạo ra 1 sự kiện ngắt khi bộ đếm đếm về 0.
	Nguồn Clock có thể chọn từ:
		Nguồn Clock của hệ thống (AHB).
		Nguồn Clock của hệ thống /8 (AHB/8).
	Systick sẽ đếm từ giá trị nạp lại (được khởi tạo sẵn) về 0 và giá trị này tự động được nạp lại trong chu kỳ đếm tiếp theo.

2. Một số thanh ghi
a. STK_CTRL - SysTick control and status register.
COUNTFLAG : bằng 1 ở lần đầu tiên giá trị đếm = 0 và giữ nguyên trạng thái cho các lần tiếp theo.
CLKSOURCE: chọn lựa nguồn clock source là AHB/8 hoặc AHB.
TICKINT : có kiểm tra ngắt khi bộ đếm bằng 0 hay không.
ENABLE: cho phép bộ đếm bắt đầu đếm hay không.
b.STK_LOAD – SysTick reload value register.
RELOAD: đây là giá trị đếm được truyền vào khi bộ đếm bắt đầu và khi bộ đếm bắt đầu lại khi tràn về 0. Giá trị thực của bộ đếm = giá trị truyền vào + 1. Giá trị tối đa của thanh ghi này = 2^24.
c.K_VAL - SysTick current value register.
CURRENT[23:0] : thanh ghi này chứa giá trị đếm hiện tại của bộ đếm.

---------------------------------------------------TIMER-------------------------------------------------------------
1. Khái niệm:
 Timer cung cấp cho người dùng nhiều ứng dụng như xác định chính xác một khoảng thời gian, đo – đếm xung đầu vào, điều khiển dạng sóng đầu ra, băm xung….
STM32 có 8 bộ Timer, trong đó có 1 bộ Advanced – control timer (TIM1) thường được các bộ thư viện sử dụng để tạo bộ đếm thời gian chuẩn của hệ thống (như ngắt System Tick, các hàm tạo Delay, TimeOut…), và 7 bộ General – purpose timer (TIM2 đến TIM5 và TIM9 đến TIM11

2. Timer base unit
- Thành phần 0của timer là
	+Bộ đếm(Counter):Có thể đếm lên hoặc đếm xuống
	+Auto Reload value là giá trị bộ đếm tối đa có thể được điều chỉnh để nạp vào cho timer. Giá trị bộ đếm này được cài đặt tối đa là 16bit tương ứng với giá trị là 65535
	+Prescaler là bộ chia tần số của timer. Bộ chia này có giá trị tối đa là 16 bit tương ứng với giá trị là 65535. Các giá trị này có thể được thay đổi và điều chỉnh bằng lập trình. Tần số sau bộ chia này sẽ được tính là:
- Công thức: UpdateEvent = ClockTimer/(Prescaler+1)(Period+1)

3. Các thanh ghi
a.Counter Register (TIMx_CNT): Khi hoạt động, thanh ghi này tăng hoặc giảm giá trị theo mỗi xung clock đầu vào. Tùy vào bộ timer mà counter này có thể là 16bit hoặc 32bit.
b.Prescaler Register (TIMx_PSC): Giá trị của thanh ghi bộ chia tần (16bit) cho phép người dùng cấu hình chia tần số đầu vào (CK_PSC) cho bất kì giá trị nào từ [1- 65536]. Sử dụng kết hợp bộ chia tần của timer và của RCC giúp chúng ta có thể thay đổi được thời gian của mỗi lần CNT thực hiện đếm, giúp tạo ra được những khoảng thời gian, điều chế được độ rộng xung phù hợp với nhu cầu.
c.Auto-Reload Register (TIMx_ARR): Giá trị của ARR được người dùng xác định sẵn khi cài đặt bộ timer, làm cơ sở cho CNT thực hiện nạp lại giá trị đếm mỗi khi tràn (overflow khi đếm lên – CNT vượt giá trị ARR, underflow khi đếm xuống – CNT bé hơn 0).Tùy vào bộ timer mà counter này có thể là 16bit hoặc 32bit.

4. Các chế độ hoạt động
+ Upcounting mode (chế độ đếm lên): Ở chế độ này, CNT đếm lên từ 0 (hoặc một giá trị nào đó được người dùng ghi vào CNT trước) đến giá trị của thanh ghi ARR, sau đó CNT bắt đầu lại từ 0. Lúc này có sự kiện tràn counter – overflow, sự kiện này có thể tạo yêu cầu ngắt nếu người dùng cấu hình cho phép ngắt.
+ Downcouting mode (chế độ đếm xuống): Ở chế độ này, CNT đếm xuống từ giá trị thanh ghi ARR (hoặc 1 giá trị nào đó do người dùng ghi trực tiếp vào CNT trước) đến 0, sau đó CNT bắt đầu lại từ giá trị ARR, lúc này có sự kiện tràn counter – underflow, sự kiện này có thể tạo yêu cầu ngắt nếu người dùng cấu hình cho phép ngắt
+ Center-Aligned mode (chế độ đếm lên và xuống): Ở chế độ này, counter sẽ đếm lên từ 0 (hoặc một giá trị nào đó được người dùng ghi vào CNT trước) đến giá trị thanh ghi ARR – 1, lúc này xuất hiện sự kiện tràn counter – overflow, tiếp theo CNT  sẽ đếm xuống từ ARR tới 1, lúc này có sự kiện tràn counter – underflow, sau đó CNT sẽ về giá trị 0 và bắt đầu lại quá trình đếm lên.

5. Clock cho bộ timer
- Internal clock (CK_INT): Chọn nguồn clock từ clock của hệ thống, có thể là từ thạch anh dao động tần số cao bên ngoài (HSE) hay bộ dao động RC tần số cao được tích hợp sẵn bên trong STM(HSI), từ đấy qua các bộ chia tần của hệ thống clock để cấp cho ngoại vi timer (TIM2 đến TIM5 có clock CK_PSC đầu vào bằng clock của bus APB1, TIM9 đến TIM11 có clock Ck_PSC bằng clock bus APB2). CK_PSC là clock chưa qua bộ Prescaler của khối timer.
- External clock mode1: Nếu chọn mode này thì counter có thể đếm mỗi khi chân external input pin (TIx) xuất hiện sườn lên hoặc sườn xuống, người dùng cấu hình chọn sườn.
- External clock mode2: Nếu chọn mode này thì counter có thể đếm mỗi khi chân external trigger input (ETR) xuất hiện sườn lên hoặc sườn xuống. (Mode này chỉ có ở các bộ TIM2, TIM3, TIM4).
– Internal trigger inputs (ITRx): Mode này cho phép sử dụng một timer làm bộ prescaler cho một bộ timer khác.

6. Các kênh capture/compare
Mỗi bộ timer có 4 kênh Capture/Compare độc lập, mỗi kênh này phối hợp Time-base unit có thể tạo ra các tính năng
- Input caputer: Ở chế độ Input capture, thanh ghi CRR của kênh đầu vào tương ứng sẽ được sử dụng để lưu giá trị của CNT khi phát hiện sự thay đổi mức logic (sườn lên/ sườn xuống) như được cấu hình trước đó. Từ đó có thể biết được khoảng thời gian giữa 2 lần có sườn lên hoặc sườn xuống. 
– Output compare: Chế độ này thường được sử dụng để điều khiển đầu ra của 1 I/O PIN khi timer đạt được một chu kỳ thời gian, cũng chính là khi giá trị CNT đếm tới giá trị bằng với giá trị thanh ghi capture/campare (đã được nạp sẵn). Người dùng có thể cài đặt I/O Pin tương ứng với các giá trị logic: mức 1, mức 0 hoặc đảo giá trị logic hiện tại. Đồng thời, cờ ngắt được bật lên và yêu cầu ngắt cũng được tạo ra nếu người dùng cấu hình cho phép ngắt. 
– PWM generation: Tính năng điều chế độ rộng xung cho phép tạo ra xung với tần số được xác định bởi giá trị của thanh ghi ARR, và chu kỳ nhiệm vụ (Duty cycle) được xác định bởi giá trị thanh ghi CCR.
- One-pulse mode output: Chế độ này là một trường hợp cụ thể PWM, giúp tạo ra 1 xung với độ rộng xung có thể cấu hình được. Counter sẽ được dừng lại tự động khi tràn overflow/underflow